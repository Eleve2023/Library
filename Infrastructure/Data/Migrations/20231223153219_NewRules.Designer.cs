// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231223153219_NewRules")]
    partial class NewRules
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.LibraryManagement.Borrowings.BorrowRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DelayTolerated")
                        .HasColumnType("int");

                    b.Property<decimal>("FineForDamage")
                        .HasColumnType("decimal(20, 5)");

                    b.Property<decimal>("FinePerDayForLateReturn")
                        .HasColumnType("decimal(20, 5)");

                    b.Property<int>("LoanDuration")
                        .HasColumnType("int");

                    b.Property<int>("MaxBorrowing")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PercentageToAddForLostItem")
                        .HasColumnType("decimal(20, 5)");

                    b.Property<int>("ProhibitionToBorrow")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("BorrowRule");
                });

            modelBuilder.Entity("Domain.Entities.LibraryManagement.Borrowings.Borrowing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BorrowRuleId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("BorrowingDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("DateRestitution")
                        .HasColumnType("date");

                    b.Property<Guid>("LibraryCardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WorkCodeISBN")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BorrowRuleId");

                    b.HasIndex("LibraryCardId");

                    b.HasIndex("WorkCodeISBN");

                    b.ToTable("Borrowing", t =>
                        {
                            t.HasTrigger("DummyTrigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Domain.Entities.LibraryManagement.Borrowings.BorrowingAlertView", b =>
                {
                    b.Property<Guid>("CardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DaysBorrowed")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable((string)null);

                    b.ToView("BorrowingAlertView", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.LibraryManagement.Fine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(20, 5)");

                    b.Property<int>("BorrowingId")
                        .HasColumnType("int");

                    b.Property<int?>("BorrowingId1")
                        .HasColumnType("int");

                    b.Property<Guid>("LibraryCardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LibraryCardId1")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BorrowingId");

                    b.HasIndex("BorrowingId1");

                    b.HasIndex("LibraryCardId");

                    b.HasIndex("LibraryCardId1");

                    b.ToTable("Fine");
                });

            modelBuilder.Entity("Domain.Entities.LibraryManagement.LibraryCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateOnly>("CreatedAt")
                        .HasColumnType("date");

                    b.Property<DateOnly>("ExpirationDate")
                        .HasColumnType("date");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("LibraryCard");
                });

            modelBuilder.Entity("Domain.Entities.Persons.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Statu")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar");

                    b.HasKey("Id");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("Domain.Entities.Works.Work", b =>
                {
                    b.Property<string>("CodeISBN")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DomainId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBorrowing")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(20, 5)");

                    b.HasKey("CodeISBN");

                    b.HasIndex("DomainId");

                    b.HasIndex("TypeId");

                    b.ToTable("Work");
                });

            modelBuilder.Entity("Domain.Entities.Works.WorkDomain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WorkDomain");
                });

            modelBuilder.Entity("Domain.Entities.Works.WorkType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WorkType");
                });

            modelBuilder.Entity("Domain.Entities.LibraryManagement.Borrowings.Borrowing", b =>
                {
                    b.HasOne("Domain.Entities.LibraryManagement.Borrowings.BorrowRule", "BorrowRule")
                        .WithMany()
                        .HasForeignKey("BorrowRuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.LibraryManagement.LibraryCard", "LibraryCard")
                        .WithMany()
                        .HasForeignKey("LibraryCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Works.Work", "Work")
                        .WithMany()
                        .HasForeignKey("WorkCodeISBN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BorrowRule");

                    b.Navigation("LibraryCard");

                    b.Navigation("Work");
                });

            modelBuilder.Entity("Domain.Entities.LibraryManagement.Fine", b =>
                {
                    b.HasOne("Domain.Entities.LibraryManagement.Borrowings.Borrowing", "Borrowing")
                        .WithMany()
                        .HasForeignKey("BorrowingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.LibraryManagement.Borrowings.Borrowing", null)
                        .WithMany("Fines")
                        .HasForeignKey("BorrowingId1");

                    b.HasOne("Domain.Entities.LibraryManagement.LibraryCard", "LibraryCard")
                        .WithMany()
                        .HasForeignKey("LibraryCardId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.LibraryManagement.LibraryCard", null)
                        .WithMany("Fines")
                        .HasForeignKey("LibraryCardId1");

                    b.Navigation("Borrowing");

                    b.Navigation("LibraryCard");
                });

            modelBuilder.Entity("Domain.Entities.LibraryManagement.LibraryCard", b =>
                {
                    b.HasOne("Domain.Entities.Persons.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Domain.Entities.Works.Work", b =>
                {
                    b.HasOne("Domain.Entities.Works.WorkDomain", "Domain")
                        .WithMany("Works")
                        .HasForeignKey("DomainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Works.WorkType", "Type")
                        .WithMany("Works")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Domain");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Domain.Entities.LibraryManagement.Borrowings.Borrowing", b =>
                {
                    b.Navigation("Fines");
                });

            modelBuilder.Entity("Domain.Entities.LibraryManagement.LibraryCard", b =>
                {
                    b.Navigation("Fines");
                });

            modelBuilder.Entity("Domain.Entities.Works.WorkDomain", b =>
                {
                    b.Navigation("Works");
                });

            modelBuilder.Entity("Domain.Entities.Works.WorkType", b =>
                {
                    b.Navigation("Works");
                });
#pragma warning restore 612, 618
        }
    }
}
